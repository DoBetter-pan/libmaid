// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/controller.proto

#ifndef PROTOBUF_maid_2fcontroller_2eproto__INCLUDED
#define PROTOBUF_maid_2fcontroller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_maid_2fcontroller_2eproto();
void protobuf_AssignDesc_maid_2fcontroller_2eproto();
void protobuf_ShutdownFile_maid_2fcontroller_2eproto();

class ControllerProto;

// ===================================================================

class ControllerProto : public ::google::protobuf::Message {
 public:
  ControllerProto();
  virtual ~ControllerProto();

  ControllerProto(const ControllerProto& from);

  inline ControllerProto& operator=(const ControllerProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerProto& default_instance();

  void Swap(ControllerProto* other);

  // implements Message ----------------------------------------------

  inline ControllerProto* New() const { return New(NULL); }

  ControllerProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerProto& from);
  void MergeFrom(const ControllerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControllerProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // optional uint64 transmit_id = 3;
  void clear_transmit_id();
  static const int kTransmitIdFieldNumber = 3;
  ::google::protobuf::uint64 transmit_id() const;
  void set_transmit_id(::google::protobuf::uint64 value);

  // optional bool stub = 4;
  void clear_stub();
  static const int kStubFieldNumber = 4;
  bool stub() const;
  void set_stub(bool value);

  // optional bool is_canceled = 5;
  void clear_is_canceled();
  static const int kIsCanceledFieldNumber = 5;
  bool is_canceled() const;
  void set_is_canceled(bool value);

  // optional bool failed = 6;
  void clear_failed();
  static const int kFailedFieldNumber = 6;
  bool failed() const;
  void set_failed(bool value);

  // optional string error_text = 7;
  void clear_error_text();
  static const int kErrorTextFieldNumber = 7;
  const ::std::string& error_text() const;
  void set_error_text(const ::std::string& value);
  void set_error_text(const char* value);
  void set_error_text(const char* value, size_t size);
  ::std::string* mutable_error_text();
  ::std::string* release_error_text();
  void set_allocated_error_text(::std::string* error_text);

  // optional bool notify = 9;
  void clear_notify();
  static const int kNotifyFieldNumber = 9;
  bool notify() const;
  void set_notify(bool value);

  // optional .google.protobuf.Any message = 10;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 10;
  const ::google::protobuf::Any& message() const;
  ::google::protobuf::Any* mutable_message();
  ::google::protobuf::Any* release_message();
  void set_allocated_message(::google::protobuf::Any* message);

  // optional string full_service_name = 11;
  void clear_full_service_name();
  static const int kFullServiceNameFieldNumber = 11;
  const ::std::string& full_service_name() const;
  void set_full_service_name(const ::std::string& value);
  void set_full_service_name(const char* value);
  void set_full_service_name(const char* value, size_t size);
  ::std::string* mutable_full_service_name();
  ::std::string* release_full_service_name();
  void set_allocated_full_service_name(::std::string* full_service_name);

  // optional int64 connection_id = 100;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 100;
  ::google::protobuf::int64 connection_id() const;
  void set_connection_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:maid.proto.ControllerProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::uint64 transmit_id_;
  ::google::protobuf::internal::ArenaStringPtr error_text_;
  ::google::protobuf::Any* message_;
  ::google::protobuf::internal::ArenaStringPtr full_service_name_;
  ::google::protobuf::int64 connection_id_;
  bool stub_;
  bool is_canceled_;
  bool failed_;
  bool notify_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_maid_2fcontroller_2eproto();
  friend void protobuf_AssignDesc_maid_2fcontroller_2eproto();
  friend void protobuf_ShutdownFile_maid_2fcontroller_2eproto();

  void InitAsDefaultInstance();
  static ControllerProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ControllerProto

// optional string method_name = 2;
inline void ControllerProto::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControllerProto::method_name() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.method_name)
  return method_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerProto::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.method_name)
}
inline void ControllerProto::set_method_name(const char* value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:maid.proto.ControllerProto.method_name)
}
inline void ControllerProto::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:maid.proto.ControllerProto.method_name)
}
inline ::std::string* ControllerProto::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:maid.proto.ControllerProto.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControllerProto::release_method_name() {
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerProto::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:maid.proto.ControllerProto.method_name)
}

// optional uint64 transmit_id = 3;
inline void ControllerProto::clear_transmit_id() {
  transmit_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ControllerProto::transmit_id() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.transmit_id)
  return transmit_id_;
}
inline void ControllerProto::set_transmit_id(::google::protobuf::uint64 value) {
  
  transmit_id_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.transmit_id)
}

// optional bool stub = 4;
inline void ControllerProto::clear_stub() {
  stub_ = false;
}
inline bool ControllerProto::stub() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.stub)
  return stub_;
}
inline void ControllerProto::set_stub(bool value) {
  
  stub_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.stub)
}

// optional bool is_canceled = 5;
inline void ControllerProto::clear_is_canceled() {
  is_canceled_ = false;
}
inline bool ControllerProto::is_canceled() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.is_canceled)
  return is_canceled_;
}
inline void ControllerProto::set_is_canceled(bool value) {
  
  is_canceled_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.is_canceled)
}

// optional bool failed = 6;
inline void ControllerProto::clear_failed() {
  failed_ = false;
}
inline bool ControllerProto::failed() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.failed)
  return failed_;
}
inline void ControllerProto::set_failed(bool value) {
  
  failed_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.failed)
}

// optional string error_text = 7;
inline void ControllerProto::clear_error_text() {
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControllerProto::error_text() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.error_text)
  return error_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerProto::set_error_text(const ::std::string& value) {
  
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.error_text)
}
inline void ControllerProto::set_error_text(const char* value) {
  
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:maid.proto.ControllerProto.error_text)
}
inline void ControllerProto::set_error_text(const char* value, size_t size) {
  
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:maid.proto.ControllerProto.error_text)
}
inline ::std::string* ControllerProto::mutable_error_text() {
  
  // @@protoc_insertion_point(field_mutable:maid.proto.ControllerProto.error_text)
  return error_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControllerProto::release_error_text() {
  
  return error_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerProto::set_allocated_error_text(::std::string* error_text) {
  if (error_text != NULL) {
    
  } else {
    
  }
  error_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_text);
  // @@protoc_insertion_point(field_set_allocated:maid.proto.ControllerProto.error_text)
}

// optional bool notify = 9;
inline void ControllerProto::clear_notify() {
  notify_ = false;
}
inline bool ControllerProto::notify() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.notify)
  return notify_;
}
inline void ControllerProto::set_notify(bool value) {
  
  notify_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.notify)
}

// optional .google.protobuf.Any message = 10;
inline bool ControllerProto::has_message() const {
  return !_is_default_instance_ && message_ != NULL;
}
inline void ControllerProto::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::google::protobuf::Any& ControllerProto::message() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::google::protobuf::Any* ControllerProto::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:maid.proto.ControllerProto.message)
  return message_;
}
inline ::google::protobuf::Any* ControllerProto::release_message() {
  
  ::google::protobuf::Any* temp = message_;
  message_ = NULL;
  return temp;
}
inline void ControllerProto::set_allocated_message(::google::protobuf::Any* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:maid.proto.ControllerProto.message)
}

// optional string full_service_name = 11;
inline void ControllerProto::clear_full_service_name() {
  full_service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControllerProto::full_service_name() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.full_service_name)
  return full_service_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerProto::set_full_service_name(const ::std::string& value) {
  
  full_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.full_service_name)
}
inline void ControllerProto::set_full_service_name(const char* value) {
  
  full_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:maid.proto.ControllerProto.full_service_name)
}
inline void ControllerProto::set_full_service_name(const char* value, size_t size) {
  
  full_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:maid.proto.ControllerProto.full_service_name)
}
inline ::std::string* ControllerProto::mutable_full_service_name() {
  
  // @@protoc_insertion_point(field_mutable:maid.proto.ControllerProto.full_service_name)
  return full_service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControllerProto::release_full_service_name() {
  
  return full_service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControllerProto::set_allocated_full_service_name(::std::string* full_service_name) {
  if (full_service_name != NULL) {
    
  } else {
    
  }
  full_service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_service_name);
  // @@protoc_insertion_point(field_set_allocated:maid.proto.ControllerProto.full_service_name)
}

// optional int64 connection_id = 100;
inline void ControllerProto::clear_connection_id() {
  connection_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ControllerProto::connection_id() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.connection_id)
  return connection_id_;
}
inline void ControllerProto::set_connection_id(::google::protobuf::int64 value) {
  
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.connection_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_maid_2fcontroller_2eproto__INCLUDED
