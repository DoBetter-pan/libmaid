// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/middleware.proto

#ifndef PROTOBUF_maid_2fmiddleware_2eproto__INCLUDED
#define PROTOBUF_maid_2fmiddleware_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include "maid/controller.pb.h"
#include "maid/connection.pb.h"
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_maid_2fmiddleware_2eproto();
void protobuf_AssignDesc_maid_2fmiddleware_2eproto();
void protobuf_ShutdownFile_maid_2fmiddleware_2eproto();


// ===================================================================


// ===================================================================

class Middleware_Stub;

class Middleware : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Middleware() {};
 public:
  virtual ~Middleware();

  typedef Middleware_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Connected(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ConnectionProto* request,
                       ::maid::proto::ConnectionProto* response,
                       ::google::protobuf::Closure* done);
  virtual void Disconnected(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ConnectionProto* request,
                       ::maid::proto::ConnectionProto* response,
                       ::google::protobuf::Closure* done);
  virtual void ProcessRequest(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ControllerProto* request,
                       ::maid::proto::ControllerProto* response,
                       ::google::protobuf::Closure* done);
  virtual void ProcessResponse(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ControllerProto* request,
                       ::maid::proto::ControllerProto* response,
                       ::google::protobuf::Closure* done);
  virtual void ProcessRequestStub(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ControllerProto* request,
                       ::maid::proto::ControllerProto* response,
                       ::google::protobuf::Closure* done);
  virtual void ProcessResponseStub(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ControllerProto* request,
                       ::maid::proto::ControllerProto* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Middleware);
};

class Middleware_Stub : public Middleware {
 public:
  Middleware_Stub(::google::protobuf::RpcChannel* channel);
  Middleware_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Middleware_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Middleware ------------------------------------------

  void Connected(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ConnectionProto* request,
                       ::maid::proto::ConnectionProto* response,
                       ::google::protobuf::Closure* done);
  void Disconnected(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ConnectionProto* request,
                       ::maid::proto::ConnectionProto* response,
                       ::google::protobuf::Closure* done);
  void ProcessRequest(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ControllerProto* request,
                       ::maid::proto::ControllerProto* response,
                       ::google::protobuf::Closure* done);
  void ProcessResponse(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ControllerProto* request,
                       ::maid::proto::ControllerProto* response,
                       ::google::protobuf::Closure* done);
  void ProcessRequestStub(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ControllerProto* request,
                       ::maid::proto::ControllerProto* response,
                       ::google::protobuf::Closure* done);
  void ProcessResponseStub(::google::protobuf::RpcController* controller,
                       const ::maid::proto::ControllerProto* request,
                       ::maid::proto::ControllerProto* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Middleware_Stub);
};


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_maid_2fmiddleware_2eproto__INCLUDED
