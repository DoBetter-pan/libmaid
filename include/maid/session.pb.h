// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/session.proto

#ifndef PROTOBUF_maid_2fsession_2eproto__INCLUDED
#define PROTOBUF_maid_2fsession_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "maid/controller.pb.h"
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_maid_2fsession_2eproto();
void protobuf_AssignDesc_maid_2fsession_2eproto();
void protobuf_ShutdownFile_maid_2fsession_2eproto();

class SessionProto;

// ===================================================================

class SessionProto : public ::google::protobuf::Message {
 public:
  SessionProto();
  virtual ~SessionProto();

  SessionProto(const SessionProto& from);

  inline SessionProto& operator=(const SessionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionProto& default_instance();

  void Swap(SessionProto* other);

  // implements Message ----------------------------------------------

  inline SessionProto* New() const { return New(NULL); }

  SessionProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionProto& from);
  void MergeFrom(const SessionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional uint64 expired_time = 2;
  inline bool has_expired_time() const;
  inline void clear_expired_time();
  static const int kExpiredTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 expired_time() const;
  inline void set_expired_time(::google::protobuf::uint64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SessionProto)
  // @@protoc_insertion_point(class_scope:maid.proto.SessionProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_expired_time();
  inline void clear_has_expired_time();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint64 expired_time_;
  friend void  protobuf_AddDesc_maid_2fsession_2eproto();
  friend void protobuf_AssignDesc_maid_2fsession_2eproto();
  friend void protobuf_ShutdownFile_maid_2fsession_2eproto();

  void InitAsDefaultInstance();
  static SessionProto* default_instance_;
};
// ===================================================================

static const int kSessionFieldNumber = 1002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::maid::proto::ControllerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::maid::proto::SessionProto >, 11, false >
  session;

// ===================================================================

// SessionProto

// optional string id = 1;
inline bool SessionProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionProto::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& SessionProto::id() const {
  // @@protoc_insertion_point(field_get:maid.proto.SessionProto.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionProto::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:maid.proto.SessionProto.id)
}
inline void SessionProto::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:maid.proto.SessionProto.id)
}
inline void SessionProto::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:maid.proto.SessionProto.id)
}
inline ::std::string* SessionProto::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:maid.proto.SessionProto.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionProto::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionProto::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:maid.proto.SessionProto.id)
}

// optional uint64 expired_time = 2;
inline bool SessionProto::has_expired_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionProto::set_has_expired_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionProto::clear_has_expired_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionProto::clear_expired_time() {
  expired_time_ = GOOGLE_ULONGLONG(0);
  clear_has_expired_time();
}
inline ::google::protobuf::uint64 SessionProto::expired_time() const {
  // @@protoc_insertion_point(field_get:maid.proto.SessionProto.expired_time)
  return expired_time_;
}
inline void SessionProto::set_expired_time(::google::protobuf::uint64 value) {
  set_has_expired_time();
  expired_time_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.SessionProto.expired_time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_maid_2fsession_2eproto__INCLUDED
