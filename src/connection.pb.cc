// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/connection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maid/connection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ConnectionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maid_2fconnection_2eproto() {
  protobuf_AddDesc_maid_2fconnection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maid/connection.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectionProto_descriptor_ = file->message_type(0);
  static const int ConnectionProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionProto, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionProto, port_),
  };
  ConnectionProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectionProto_descriptor_,
      ConnectionProto::default_instance_,
      ConnectionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionProto, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionProto, _extensions_),
      sizeof(ConnectionProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionProto, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maid_2fconnection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectionProto_descriptor_, &ConnectionProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maid_2fconnection_2eproto() {
  delete ConnectionProto::default_instance_;
  delete ConnectionProto_reflection_;
}

void protobuf_AddDesc_maid_2fconnection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::maid::proto::protobuf_AddDesc_maid_2fcontroller_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025maid/connection.proto\022\nmaid.proto\032\025mai"
    "d/controller.proto\"D\n\017ConnectionProto\022\n\n"
    "\002id\030\001 \001(\003\022\014\n\004host\030\002 \001(\t\022\014\n\004port\030\003 \001(\005*\t\010"
    "\350\007\020\200\200\200\200\002:M\n\nconnection\022\033.maid.proto.Cont"
    "rollerProto\030\351\007 \001(\0132\033.maid.proto.Connecti"
    "onProto", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maid/connection.proto", &protobuf_RegisterTypes);
  ConnectionProto::default_instance_ = new ConnectionProto();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::maid::proto::ControllerProto::default_instance(),
    1001, 11, false, false,
    &::maid::proto::ConnectionProto::default_instance());
  ConnectionProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maid_2fconnection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maid_2fconnection_2eproto {
  StaticDescriptorInitializer_maid_2fconnection_2eproto() {
    protobuf_AddDesc_maid_2fconnection_2eproto();
  }
} static_descriptor_initializer_maid_2fconnection_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ConnectionProto::kIdFieldNumber;
const int ConnectionProto::kHostFieldNumber;
const int ConnectionProto::kPortFieldNumber;
#endif  // !_MSC_VER

ConnectionProto::ConnectionProto()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maid.proto.ConnectionProto)
}

void ConnectionProto::InitAsDefaultInstance() {
}

ConnectionProto::ConnectionProto(const ConnectionProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maid.proto.ConnectionProto)
}

void ConnectionProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionProto::~ConnectionProto() {
  // @@protoc_insertion_point(destructor:maid.proto.ConnectionProto)
  SharedDtor();
}

void ConnectionProto::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionProto_descriptor_;
}

const ConnectionProto& ConnectionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maid_2fconnection_2eproto();
  return *default_instance_;
}

ConnectionProto* ConnectionProto::default_instance_ = NULL;

ConnectionProto* ConnectionProto::New(::google::protobuf::Arena* arena) const {
  ConnectionProto* n = new ConnectionProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionProto::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_host()) {
      host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnectionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maid.proto.ConnectionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // optional string host = 2;
      case 2: {
        if (tag == 18) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "maid.proto.ConnectionProto.host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maid.proto.ConnectionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maid.proto.ConnectionProto)
  return false;
#undef DO_
}

void ConnectionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maid.proto.ConnectionProto)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "maid.proto.ConnectionProto.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:maid.proto.ConnectionProto)
}

::google::protobuf::uint8* ConnectionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maid.proto.ConnectionProto)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "maid.proto.ConnectionProto.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maid.proto.ConnectionProto)
  return target;
}

int ConnectionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionProto::MergeFrom(const ConnectionProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_host()) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConnectionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionProto::CopyFrom(const ConnectionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionProto::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ConnectionProto::Swap(ConnectionProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionProto::InternalSwap(ConnectionProto* other) {
  std::swap(id_, other->id_);
  host_.Swap(&other->host_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata ConnectionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionProto_descriptor_;
  metadata.reflection = ConnectionProto_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::maid::proto::ControllerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::maid::proto::ConnectionProto >, 11, false >
  connection(kConnectionFieldNumber, ::maid::proto::ConnectionProto::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

// @@protoc_insertion_point(global_scope)
