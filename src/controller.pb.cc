// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/controller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maid/controller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ControllerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maid_2fcontroller_2eproto() {
  protobuf_AddDesc_maid_2fcontroller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maid/controller.proto");
  GOOGLE_CHECK(file != NULL);
  ControllerProto_descriptor_ = file->message_type(0);
  static const int ControllerProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, transmit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, stub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, is_canceled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, error_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, full_service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, connection_id_),
  };
  ControllerProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerProto_descriptor_,
      ControllerProto::default_instance_,
      ControllerProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControllerProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerProto, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maid_2fcontroller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerProto_descriptor_, &ControllerProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maid_2fcontroller_2eproto() {
  delete ControllerProto::default_instance_;
  delete ControllerProto_reflection_;
}

void protobuf_AddDesc_maid_2fcontroller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025maid/controller.proto\022\nmaid.proto\"\325\001\n\017"
    "ControllerProto\022\023\n\013method_name\030\002 \001(\t\022\023\n\013"
    "transmit_id\030\003 \001(\004\022\014\n\004stub\030\004 \001(\010\022\023\n\013is_ca"
    "nceled\030\005 \001(\010\022\016\n\006failed\030\006 \001(\010\022\022\n\nerror_te"
    "xt\030\007 \001(\t\022\016\n\006notify\030\t \001(\010\022\017\n\007message\030\n \001("
    "\014\022\031\n\021full_service_name\030\013 \001(\t\022\025\n\rconnecti"
    "on_id\030d \001(\003b\006proto3", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maid/controller.proto", &protobuf_RegisterTypes);
  ControllerProto::default_instance_ = new ControllerProto();
  ControllerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maid_2fcontroller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maid_2fcontroller_2eproto {
  StaticDescriptorInitializer_maid_2fcontroller_2eproto() {
    protobuf_AddDesc_maid_2fcontroller_2eproto();
  }
} static_descriptor_initializer_maid_2fcontroller_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ControllerProto::kMethodNameFieldNumber;
const int ControllerProto::kTransmitIdFieldNumber;
const int ControllerProto::kStubFieldNumber;
const int ControllerProto::kIsCanceledFieldNumber;
const int ControllerProto::kFailedFieldNumber;
const int ControllerProto::kErrorTextFieldNumber;
const int ControllerProto::kNotifyFieldNumber;
const int ControllerProto::kMessageFieldNumber;
const int ControllerProto::kFullServiceNameFieldNumber;
const int ControllerProto::kConnectionIdFieldNumber;
#endif  // !_MSC_VER

ControllerProto::ControllerProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maid.proto.ControllerProto)
}

void ControllerProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ControllerProto::ControllerProto(const ControllerProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maid.proto.ControllerProto)
}

void ControllerProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmit_id_ = GOOGLE_ULONGLONG(0);
  stub_ = false;
  is_canceled_ = false;
  failed_ = false;
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_ = false;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_id_ = GOOGLE_LONGLONG(0);
}

ControllerProto::~ControllerProto() {
  // @@protoc_insertion_point(destructor:maid.proto.ControllerProto)
  SharedDtor();
}

void ControllerProto::SharedDtor() {
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ControllerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerProto_descriptor_;
}

const ControllerProto& ControllerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maid_2fcontroller_2eproto();
  return *default_instance_;
}

ControllerProto* ControllerProto::default_instance_ = NULL;

ControllerProto* ControllerProto::New(::google::protobuf::Arena* arena) const {
  ControllerProto* n = new ControllerProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerProto::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControllerProto*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stub_, notify_);
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmit_id_ = GOOGLE_ULONGLONG(0);
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_id_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool ControllerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maid.proto.ControllerProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string method_name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "maid.proto.ControllerProto.method_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transmit_id;
        break;
      }

      // optional uint64 transmit_id = 3;
      case 3: {
        if (tag == 24) {
         parse_transmit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transmit_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stub;
        break;
      }

      // optional bool stub = 4;
      case 4: {
        if (tag == 32) {
         parse_stub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stub_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_canceled;
        break;
      }

      // optional bool is_canceled = 5;
      case 5: {
        if (tag == 40) {
         parse_is_canceled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_canceled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_failed;
        break;
      }

      // optional bool failed = 6;
      case 6: {
        if (tag == 48) {
         parse_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_error_text;
        break;
      }

      // optional string error_text = 7;
      case 7: {
        if (tag == 58) {
         parse_error_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "maid.proto.ControllerProto.error_text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_notify;
        break;
      }

      // optional bool notify = 9;
      case 9: {
        if (tag == 72) {
         parse_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_message;
        break;
      }

      // optional bytes message = 10;
      case 10: {
        if (tag == 82) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_full_service_name;
        break;
      }

      // optional string full_service_name = 11;
      case 11: {
        if (tag == 90) {
         parse_full_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_service_name().data(), this->full_service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "maid.proto.ControllerProto.full_service_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_connection_id;
        break;
      }

      // optional int64 connection_id = 100;
      case 100: {
        if (tag == 800) {
         parse_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &connection_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maid.proto.ControllerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maid.proto.ControllerProto)
  return false;
#undef DO_
}

void ControllerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maid.proto.ControllerProto)
  // optional string method_name = 2;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "maid.proto.ControllerProto.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // optional uint64 transmit_id = 3;
  if (this->transmit_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->transmit_id(), output);
  }

  // optional bool stub = 4;
  if (this->stub() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stub(), output);
  }

  // optional bool is_canceled = 5;
  if (this->is_canceled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_canceled(), output);
  }

  // optional bool failed = 6;
  if (this->failed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->failed(), output);
  }

  // optional string error_text = 7;
  if (this->error_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "maid.proto.ControllerProto.error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->error_text(), output);
  }

  // optional bool notify = 9;
  if (this->notify() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->notify(), output);
  }

  // optional bytes message = 10;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->message(), output);
  }

  // optional string full_service_name = 11;
  if (this->full_service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_service_name().data(), this->full_service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "maid.proto.ControllerProto.full_service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->full_service_name(), output);
  }

  // optional int64 connection_id = 100;
  if (this->connection_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(100, this->connection_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:maid.proto.ControllerProto)
}

::google::protobuf::uint8* ControllerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maid.proto.ControllerProto)
  // optional string method_name = 2;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "maid.proto.ControllerProto.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // optional uint64 transmit_id = 3;
  if (this->transmit_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->transmit_id(), target);
  }

  // optional bool stub = 4;
  if (this->stub() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stub(), target);
  }

  // optional bool is_canceled = 5;
  if (this->is_canceled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_canceled(), target);
  }

  // optional bool failed = 6;
  if (this->failed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->failed(), target);
  }

  // optional string error_text = 7;
  if (this->error_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "maid.proto.ControllerProto.error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->error_text(), target);
  }

  // optional bool notify = 9;
  if (this->notify() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->notify(), target);
  }

  // optional bytes message = 10;
  if (this->message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->message(), target);
  }

  // optional string full_service_name = 11;
  if (this->full_service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_service_name().data(), this->full_service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "maid.proto.ControllerProto.full_service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->full_service_name(), target);
  }

  // optional int64 connection_id = 100;
  if (this->connection_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(100, this->connection_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:maid.proto.ControllerProto)
  return target;
}

int ControllerProto::ByteSize() const {
  int total_size = 0;

  // optional string method_name = 2;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  // optional uint64 transmit_id = 3;
  if (this->transmit_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->transmit_id());
  }

  // optional bool stub = 4;
  if (this->stub() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_canceled = 5;
  if (this->is_canceled() != 0) {
    total_size += 1 + 1;
  }

  // optional bool failed = 6;
  if (this->failed() != 0) {
    total_size += 1 + 1;
  }

  // optional string error_text = 7;
  if (this->error_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_text());
  }

  // optional bool notify = 9;
  if (this->notify() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes message = 10;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  // optional string full_service_name = 11;
  if (this->full_service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_service_name());
  }

  // optional int64 connection_id = 100;
  if (this->connection_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->connection_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControllerProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerProto::MergeFrom(const ControllerProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.method_name().size() > 0) {

    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.transmit_id() != 0) {
    set_transmit_id(from.transmit_id());
  }
  if (from.stub() != 0) {
    set_stub(from.stub());
  }
  if (from.is_canceled() != 0) {
    set_is_canceled(from.is_canceled());
  }
  if (from.failed() != 0) {
    set_failed(from.failed());
  }
  if (from.error_text().size() > 0) {

    error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
  }
  if (from.notify() != 0) {
    set_notify(from.notify());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.full_service_name().size() > 0) {

    full_service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_service_name_);
  }
  if (from.connection_id() != 0) {
    set_connection_id(from.connection_id());
  }
}

void ControllerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerProto::CopyFrom(const ControllerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerProto::IsInitialized() const {

  return true;
}

void ControllerProto::Swap(ControllerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerProto::InternalSwap(ControllerProto* other) {
  method_name_.Swap(&other->method_name_);
  std::swap(transmit_id_, other->transmit_id_);
  std::swap(stub_, other->stub_);
  std::swap(is_canceled_, other->is_canceled_);
  std::swap(failed_, other->failed_);
  error_text_.Swap(&other->error_text_);
  std::swap(notify_, other->notify_);
  message_.Swap(&other->message_);
  full_service_name_.Swap(&other->full_service_name_);
  std::swap(connection_id_, other->connection_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerProto_descriptor_;
  metadata.reflection = ControllerProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControllerProto

// optional string method_name = 2;
void ControllerProto::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ControllerProto::method_name() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.method_name)
  return method_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerProto::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.method_name)
}
 void ControllerProto::set_method_name(const char* value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:maid.proto.ControllerProto.method_name)
}
 void ControllerProto::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:maid.proto.ControllerProto.method_name)
}
 ::std::string* ControllerProto::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:maid.proto.ControllerProto.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ControllerProto::release_method_name() {
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerProto::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:maid.proto.ControllerProto.method_name)
}

// optional uint64 transmit_id = 3;
void ControllerProto::clear_transmit_id() {
  transmit_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ControllerProto::transmit_id() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.transmit_id)
  return transmit_id_;
}
 void ControllerProto::set_transmit_id(::google::protobuf::uint64 value) {
  
  transmit_id_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.transmit_id)
}

// optional bool stub = 4;
void ControllerProto::clear_stub() {
  stub_ = false;
}
 bool ControllerProto::stub() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.stub)
  return stub_;
}
 void ControllerProto::set_stub(bool value) {
  
  stub_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.stub)
}

// optional bool is_canceled = 5;
void ControllerProto::clear_is_canceled() {
  is_canceled_ = false;
}
 bool ControllerProto::is_canceled() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.is_canceled)
  return is_canceled_;
}
 void ControllerProto::set_is_canceled(bool value) {
  
  is_canceled_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.is_canceled)
}

// optional bool failed = 6;
void ControllerProto::clear_failed() {
  failed_ = false;
}
 bool ControllerProto::failed() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.failed)
  return failed_;
}
 void ControllerProto::set_failed(bool value) {
  
  failed_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.failed)
}

// optional string error_text = 7;
void ControllerProto::clear_error_text() {
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ControllerProto::error_text() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.error_text)
  return error_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerProto::set_error_text(const ::std::string& value) {
  
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.error_text)
}
 void ControllerProto::set_error_text(const char* value) {
  
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:maid.proto.ControllerProto.error_text)
}
 void ControllerProto::set_error_text(const char* value, size_t size) {
  
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:maid.proto.ControllerProto.error_text)
}
 ::std::string* ControllerProto::mutable_error_text() {
  
  // @@protoc_insertion_point(field_mutable:maid.proto.ControllerProto.error_text)
  return error_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ControllerProto::release_error_text() {
  
  return error_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerProto::set_allocated_error_text(::std::string* error_text) {
  if (error_text != NULL) {
    
  } else {
    
  }
  error_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_text);
  // @@protoc_insertion_point(field_set_allocated:maid.proto.ControllerProto.error_text)
}

// optional bool notify = 9;
void ControllerProto::clear_notify() {
  notify_ = false;
}
 bool ControllerProto::notify() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.notify)
  return notify_;
}
 void ControllerProto::set_notify(bool value) {
  
  notify_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.notify)
}

// optional bytes message = 10;
void ControllerProto::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ControllerProto::message() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerProto::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.message)
}
 void ControllerProto::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:maid.proto.ControllerProto.message)
}
 void ControllerProto::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:maid.proto.ControllerProto.message)
}
 ::std::string* ControllerProto::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:maid.proto.ControllerProto.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ControllerProto::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerProto::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:maid.proto.ControllerProto.message)
}

// optional string full_service_name = 11;
void ControllerProto::clear_full_service_name() {
  full_service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ControllerProto::full_service_name() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.full_service_name)
  return full_service_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerProto::set_full_service_name(const ::std::string& value) {
  
  full_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.full_service_name)
}
 void ControllerProto::set_full_service_name(const char* value) {
  
  full_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:maid.proto.ControllerProto.full_service_name)
}
 void ControllerProto::set_full_service_name(const char* value, size_t size) {
  
  full_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:maid.proto.ControllerProto.full_service_name)
}
 ::std::string* ControllerProto::mutable_full_service_name() {
  
  // @@protoc_insertion_point(field_mutable:maid.proto.ControllerProto.full_service_name)
  return full_service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ControllerProto::release_full_service_name() {
  
  return full_service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerProto::set_allocated_full_service_name(::std::string* full_service_name) {
  if (full_service_name != NULL) {
    
  } else {
    
  }
  full_service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_service_name);
  // @@protoc_insertion_point(field_set_allocated:maid.proto.ControllerProto.full_service_name)
}

// optional int64 connection_id = 100;
void ControllerProto::clear_connection_id() {
  connection_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ControllerProto::connection_id() const {
  // @@protoc_insertion_point(field_get:maid.proto.ControllerProto.connection_id)
  return connection_id_;
}
 void ControllerProto::set_connection_id(::google::protobuf::int64 value) {
  
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.ControllerProto.connection_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

// @@protoc_insertion_point(global_scope)
