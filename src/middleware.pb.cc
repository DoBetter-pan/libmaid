// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/middleware.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maid/middleware.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

namespace {

const ::google::protobuf::ServiceDescriptor* Middleware_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_maid_2fmiddleware_2eproto() {
  protobuf_AddDesc_maid_2fmiddleware_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maid/middleware.proto");
  GOOGLE_CHECK(file != NULL);
  Middleware_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maid_2fmiddleware_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_maid_2fmiddleware_2eproto() {
}

void protobuf_AddDesc_maid_2fmiddleware_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::maid::proto::protobuf_AddDesc_maid_2fcontroller_2eproto();
  ::maid::proto::protobuf_AddDesc_maid_2fconnection_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025maid/middleware.proto\022\nmaid.proto\032\025mai"
    "d/controller.proto\032\025maid/connection.prot"
    "o2\327\003\n\nMiddleware\022E\n\tConnected\022\033.maid.pro"
    "to.ConnectionProto\032\033.maid.proto.Connecti"
    "onProto\022H\n\014Disconnected\022\033.maid.proto.Con"
    "nectionProto\032\033.maid.proto.ConnectionProt"
    "o\022J\n\016ProcessRequest\022\033.maid.proto.Control"
    "lerProto\032\033.maid.proto.ControllerProto\022K\n"
    "\017ProcessResponse\022\033.maid.proto.Controller"
    "Proto\032\033.maid.proto.ControllerProto\022N\n\022Pr"
    "ocessRequestStub\022\033.maid.proto.Controller"
    "Proto\032\033.maid.proto.ControllerProto\022O\n\023Pr"
    "ocessResponseStub\022\033.maid.proto.Controlle"
    "rProto\032\033.maid.proto.ControllerProtoB\003\200\001\001", 560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maid/middleware.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maid_2fmiddleware_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maid_2fmiddleware_2eproto {
  StaticDescriptorInitializer_maid_2fmiddleware_2eproto() {
    protobuf_AddDesc_maid_2fmiddleware_2eproto();
  }
} static_descriptor_initializer_maid_2fmiddleware_2eproto_;

// ===================================================================

Middleware::~Middleware() {}

const ::google::protobuf::ServiceDescriptor* Middleware::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Middleware_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Middleware::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Middleware_descriptor_;
}

void Middleware::Connected(::google::protobuf::RpcController* controller,
                         const ::maid::proto::ConnectionProto*,
                         ::maid::proto::ConnectionProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Connected() not implemented.");
  done->Run();
}

void Middleware::Disconnected(::google::protobuf::RpcController* controller,
                         const ::maid::proto::ConnectionProto*,
                         ::maid::proto::ConnectionProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Disconnected() not implemented.");
  done->Run();
}

void Middleware::ProcessRequest(::google::protobuf::RpcController* controller,
                         const ::maid::proto::ControllerProto*,
                         ::maid::proto::ControllerProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ProcessRequest() not implemented.");
  done->Run();
}

void Middleware::ProcessResponse(::google::protobuf::RpcController* controller,
                         const ::maid::proto::ControllerProto*,
                         ::maid::proto::ControllerProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ProcessResponse() not implemented.");
  done->Run();
}

void Middleware::ProcessRequestStub(::google::protobuf::RpcController* controller,
                         const ::maid::proto::ControllerProto*,
                         ::maid::proto::ControllerProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ProcessRequestStub() not implemented.");
  done->Run();
}

void Middleware::ProcessResponseStub(::google::protobuf::RpcController* controller,
                         const ::maid::proto::ControllerProto*,
                         ::maid::proto::ControllerProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ProcessResponseStub() not implemented.");
  done->Run();
}

void Middleware::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Middleware_descriptor_);
  switch(method->index()) {
    case 0:
      Connected(controller,
             ::google::protobuf::down_cast<const ::maid::proto::ConnectionProto*>(request),
             ::google::protobuf::down_cast< ::maid::proto::ConnectionProto*>(response),
             done);
      break;
    case 1:
      Disconnected(controller,
             ::google::protobuf::down_cast<const ::maid::proto::ConnectionProto*>(request),
             ::google::protobuf::down_cast< ::maid::proto::ConnectionProto*>(response),
             done);
      break;
    case 2:
      ProcessRequest(controller,
             ::google::protobuf::down_cast<const ::maid::proto::ControllerProto*>(request),
             ::google::protobuf::down_cast< ::maid::proto::ControllerProto*>(response),
             done);
      break;
    case 3:
      ProcessResponse(controller,
             ::google::protobuf::down_cast<const ::maid::proto::ControllerProto*>(request),
             ::google::protobuf::down_cast< ::maid::proto::ControllerProto*>(response),
             done);
      break;
    case 4:
      ProcessRequestStub(controller,
             ::google::protobuf::down_cast<const ::maid::proto::ControllerProto*>(request),
             ::google::protobuf::down_cast< ::maid::proto::ControllerProto*>(response),
             done);
      break;
    case 5:
      ProcessResponseStub(controller,
             ::google::protobuf::down_cast<const ::maid::proto::ControllerProto*>(request),
             ::google::protobuf::down_cast< ::maid::proto::ControllerProto*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Middleware::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::maid::proto::ConnectionProto::default_instance();
    case 1:
      return ::maid::proto::ConnectionProto::default_instance();
    case 2:
      return ::maid::proto::ControllerProto::default_instance();
    case 3:
      return ::maid::proto::ControllerProto::default_instance();
    case 4:
      return ::maid::proto::ControllerProto::default_instance();
    case 5:
      return ::maid::proto::ControllerProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Middleware::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::maid::proto::ConnectionProto::default_instance();
    case 1:
      return ::maid::proto::ConnectionProto::default_instance();
    case 2:
      return ::maid::proto::ControllerProto::default_instance();
    case 3:
      return ::maid::proto::ControllerProto::default_instance();
    case 4:
      return ::maid::proto::ControllerProto::default_instance();
    case 5:
      return ::maid::proto::ControllerProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

Middleware_Stub::Middleware_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Middleware_Stub::Middleware_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Middleware_Stub::~Middleware_Stub() {
  if (owns_channel_) delete channel_;
}

void Middleware_Stub::Connected(::google::protobuf::RpcController* controller,
                              const ::maid::proto::ConnectionProto* request,
                              ::maid::proto::ConnectionProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Middleware_Stub::Disconnected(::google::protobuf::RpcController* controller,
                              const ::maid::proto::ConnectionProto* request,
                              ::maid::proto::ConnectionProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Middleware_Stub::ProcessRequest(::google::protobuf::RpcController* controller,
                              const ::maid::proto::ControllerProto* request,
                              ::maid::proto::ControllerProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Middleware_Stub::ProcessResponse(::google::protobuf::RpcController* controller,
                              const ::maid::proto::ControllerProto* request,
                              ::maid::proto::ControllerProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Middleware_Stub::ProcessRequestStub(::google::protobuf::RpcController* controller,
                              const ::maid::proto::ControllerProto* request,
                              ::maid::proto::ControllerProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Middleware_Stub::ProcessResponseStub(::google::protobuf::RpcController* controller,
                              const ::maid::proto::ControllerProto* request,
                              ::maid::proto::ControllerProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

// @@protoc_insertion_point(global_scope)
