// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maid/options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* MaidServiceOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaidServiceOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaidMethodOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaidMethodOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maid_2foptions_2eproto() {
  protobuf_AddDesc_maid_2foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maid/options.proto");
  GOOGLE_CHECK(file != NULL);
  MaidServiceOptions_descriptor_ = file->message_type(0);
  static const int MaidServiceOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidServiceOptions, notify_),
  };
  MaidServiceOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MaidServiceOptions_descriptor_,
      MaidServiceOptions::default_instance_,
      MaidServiceOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidServiceOptions, _has_bits_[0]),
      -1,
      -1,
      sizeof(MaidServiceOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidServiceOptions, _internal_metadata_),
      -1);
  MaidMethodOptions_descriptor_ = file->message_type(1);
  static const int MaidMethodOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidMethodOptions, notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidMethodOptions, time_out_),
  };
  MaidMethodOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MaidMethodOptions_descriptor_,
      MaidMethodOptions::default_instance_,
      MaidMethodOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidMethodOptions, _has_bits_[0]),
      -1,
      -1,
      sizeof(MaidMethodOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidMethodOptions, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maid_2foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MaidServiceOptions_descriptor_, &MaidServiceOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MaidMethodOptions_descriptor_, &MaidMethodOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maid_2foptions_2eproto() {
  delete MaidServiceOptions::default_instance_;
  delete MaidServiceOptions_reflection_;
  delete MaidMethodOptions::default_instance_;
  delete MaidMethodOptions_reflection_;
}

void protobuf_AddDesc_maid_2foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022maid/options.proto\022\nmaid.proto\032 google"
    "/protobuf/descriptor.proto\"$\n\022MaidServic"
    "eOptions\022\016\n\006notify\030\001 \001(\010\"9\n\021MaidMethodOp"
    "tions\022\016\n\006notify\030\001 \001(\010\022\024\n\010time_out\030\002 \001(\003:"
    "\002-1:Y\n\017service_options\022\037.google.protobuf"
    ".ServiceOptions\030\351\007 \001(\0132\036.maid.proto.Maid"
    "ServiceOptions:V\n\016method_options\022\036.googl"
    "e.protobuf.MethodOptions\030\351\007 \001(\0132\035.maid.p"
    "roto.MaidMethodOptions", 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maid/options.proto", &protobuf_RegisterTypes);
  MaidServiceOptions::default_instance_ = new MaidServiceOptions();
  MaidMethodOptions::default_instance_ = new MaidMethodOptions();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::ServiceOptions::default_instance(),
    1001, 11, false, false,
    &::maid::proto::MaidServiceOptions::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    1001, 11, false, false,
    &::maid::proto::MaidMethodOptions::default_instance());
  MaidServiceOptions::default_instance_->InitAsDefaultInstance();
  MaidMethodOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maid_2foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maid_2foptions_2eproto {
  StaticDescriptorInitializer_maid_2foptions_2eproto() {
    protobuf_AddDesc_maid_2foptions_2eproto();
  }
} static_descriptor_initializer_maid_2foptions_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MaidServiceOptions::kNotifyFieldNumber;
#endif  // !_MSC_VER

MaidServiceOptions::MaidServiceOptions()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maid.proto.MaidServiceOptions)
}

void MaidServiceOptions::InitAsDefaultInstance() {
}

MaidServiceOptions::MaidServiceOptions(const MaidServiceOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maid.proto.MaidServiceOptions)
}

void MaidServiceOptions::SharedCtor() {
  _cached_size_ = 0;
  notify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaidServiceOptions::~MaidServiceOptions() {
  // @@protoc_insertion_point(destructor:maid.proto.MaidServiceOptions)
  SharedDtor();
}

void MaidServiceOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaidServiceOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaidServiceOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaidServiceOptions_descriptor_;
}

const MaidServiceOptions& MaidServiceOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maid_2foptions_2eproto();
  return *default_instance_;
}

MaidServiceOptions* MaidServiceOptions::default_instance_ = NULL;

MaidServiceOptions* MaidServiceOptions::New(::google::protobuf::Arena* arena) const {
  MaidServiceOptions* n = new MaidServiceOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaidServiceOptions::Clear() {
  notify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MaidServiceOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maid.proto.MaidServiceOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool notify = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_)));
          set_has_notify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maid.proto.MaidServiceOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maid.proto.MaidServiceOptions)
  return false;
#undef DO_
}

void MaidServiceOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maid.proto.MaidServiceOptions)
  // optional bool notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->notify(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:maid.proto.MaidServiceOptions)
}

::google::protobuf::uint8* MaidServiceOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maid.proto.MaidServiceOptions)
  // optional bool notify = 1;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->notify(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maid.proto.MaidServiceOptions)
  return target;
}

int MaidServiceOptions::ByteSize() const {
  int total_size = 0;

  // optional bool notify = 1;
  if (has_notify()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaidServiceOptions::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MaidServiceOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaidServiceOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaidServiceOptions::MergeFrom(const MaidServiceOptions& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      set_notify(from.notify());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MaidServiceOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaidServiceOptions::CopyFrom(const MaidServiceOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaidServiceOptions::IsInitialized() const {

  return true;
}

void MaidServiceOptions::Swap(MaidServiceOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaidServiceOptions::InternalSwap(MaidServiceOptions* other) {
  std::swap(notify_, other->notify_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaidServiceOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaidServiceOptions_descriptor_;
  metadata.reflection = MaidServiceOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaidMethodOptions::kNotifyFieldNumber;
const int MaidMethodOptions::kTimeOutFieldNumber;
#endif  // !_MSC_VER

MaidMethodOptions::MaidMethodOptions()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maid.proto.MaidMethodOptions)
}

void MaidMethodOptions::InitAsDefaultInstance() {
}

MaidMethodOptions::MaidMethodOptions(const MaidMethodOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maid.proto.MaidMethodOptions)
}

void MaidMethodOptions::SharedCtor() {
  _cached_size_ = 0;
  notify_ = false;
  time_out_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaidMethodOptions::~MaidMethodOptions() {
  // @@protoc_insertion_point(destructor:maid.proto.MaidMethodOptions)
  SharedDtor();
}

void MaidMethodOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaidMethodOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaidMethodOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaidMethodOptions_descriptor_;
}

const MaidMethodOptions& MaidMethodOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maid_2foptions_2eproto();
  return *default_instance_;
}

MaidMethodOptions* MaidMethodOptions::default_instance_ = NULL;

MaidMethodOptions* MaidMethodOptions::New(::google::protobuf::Arena* arena) const {
  MaidMethodOptions* n = new MaidMethodOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaidMethodOptions::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    notify_ = false;
    time_out_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MaidMethodOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maid.proto.MaidMethodOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool notify = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_)));
          set_has_notify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_out;
        break;
      }

      // optional int64 time_out = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_time_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_out_)));
          set_has_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maid.proto.MaidMethodOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maid.proto.MaidMethodOptions)
  return false;
#undef DO_
}

void MaidMethodOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maid.proto.MaidMethodOptions)
  // optional bool notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->notify(), output);
  }

  // optional int64 time_out = 2 [default = -1];
  if (has_time_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:maid.proto.MaidMethodOptions)
}

::google::protobuf::uint8* MaidMethodOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maid.proto.MaidMethodOptions)
  // optional bool notify = 1;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->notify(), target);
  }

  // optional int64 time_out = 2 [default = -1];
  if (has_time_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maid.proto.MaidMethodOptions)
  return target;
}

int MaidMethodOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional bool notify = 1;
    if (has_notify()) {
      total_size += 1 + 1;
    }

    // optional int64 time_out = 2 [default = -1];
    if (has_time_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_out());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaidMethodOptions::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MaidMethodOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaidMethodOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaidMethodOptions::MergeFrom(const MaidMethodOptions& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      set_notify(from.notify());
    }
    if (from.has_time_out()) {
      set_time_out(from.time_out());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MaidMethodOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaidMethodOptions::CopyFrom(const MaidMethodOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaidMethodOptions::IsInitialized() const {

  return true;
}

void MaidMethodOptions::Swap(MaidMethodOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaidMethodOptions::InternalSwap(MaidMethodOptions* other) {
  std::swap(notify_, other->notify_);
  std::swap(time_out_, other->time_out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaidMethodOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaidMethodOptions_descriptor_;
  metadata.reflection = MaidMethodOptions_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::maid::proto::MaidServiceOptions >, 11, false >
  service_options(kServiceOptionsFieldNumber, ::maid::proto::MaidServiceOptions::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::maid::proto::MaidMethodOptions >, 11, false >
  method_options(kMethodOptionsFieldNumber, ::maid::proto::MaidMethodOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

// @@protoc_insertion_point(global_scope)
